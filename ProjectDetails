Project Overview
Develop an analytics dashboard to monitor and improve company operations, focusing on sales performance, inventory management, and employee productivity.

Walkthrough

1. Define the Project Scope
- Objective: Analyze sales performance, inventory levels, and employee productivity to identify trends and areas for improvement.
- Deliverables: SQL database, SQL queries, and a visualization dashboard.

2. Design the Database Schema
Design a schema that includes relevant tables. For example:
- Products: `product_id`, `product_name`, `category`, `price`, `stock_quantity`
- Sales: `sale_id`, `product_id`, `sale_date`, `quantity_sold`, `total_price`
- Employees: `employee_id`, `employee_name`, `department`, `hire_date`
- Employee_Performance: `performance_id`, `employee_id`, `evaluation_date`, `sales_generated`, `tasks_completed`

3. Create the Database and Tables
```sql
CREATE DATABASE company_operations;

USE company_operations;

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT
);

CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    sale_date DATE,
    quantity_sold INT,
    total_price DECIMAL(10, 2),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(100),
    department VARCHAR(50),
    hire_date DATE
);

CREATE TABLE Employee_Performance (
    performance_id INT PRIMARY KEY,
    employee_id INT,
    evaluation_date DATE,
    sales_generated DECIMAL(10, 2),
    tasks_completed INT,
    FOREIGN KEY (employee_id) REFERENCES Employees(employee_id)
);
```

4. Populate the Tables with Data
Insert sample data into the tables. This can be done manually or using scripts.

```sql
INSERT INTO Products (product_id, product_name, category, price, stock_quantity) VALUES
(1, 'Product A', 'Category 1', 10.00, 100),
(2, 'Product B', 'Category 2', 20.00, 200),
(3, 'Product C', 'Category 3', 30.00, 300);

INSERT INTO Sales (sale_id, product_id, sale_date, quantity_sold, total_price) VALUES
(1, 1, '2024-01-01', 5, 50.00),
(2, 2, '2024-01-02', 3, 60.00),
(3, 3, '2024-01-03', 7, 210.00);

INSERT INTO Employees (employee_id, employee_name, department, hire_date) VALUES
(1, 'Alice', 'Sales', '2020-01-01'),
(2, 'Bob', 'HR', '2019-01-01'),
(3, 'Charlie', 'IT', '2018-01-01');

INSERT INTO Employee_Performance (performance_id, employee_id, evaluation_date, sales_generated, tasks_completed) VALUES
(1, 1, '2024-01-01', 1000.00, 50),
(2, 2, '2024-01-01', 500.00, 40),
(3, 3, '2024-01-01', 200.00, 30);
```

5. Write SQL Queries for Analysis
Develop queries to extract insights. For example:

a. Total Sales by Product:
```sql
SELECT 
    p.product_name, 
    SUM(s.quantity_sold) AS total_quantity_sold, 
    SUM(s.total_price) AS total_sales
FROM 
    Products p
JOIN 
    Sales s ON p.product_id = s.product_id
GROUP BY 
    p.product_name;
```

b. Inventory Levels:
```sql
SELECT 
    product_name, 
    stock_quantity
FROM 
    Products
WHERE 
    stock_quantity < 50;
```

c. Employee Productivity:
```sql
SELECT 
    e.employee_name, 
    ep.sales_generated, 
    ep.tasks_completed
FROM 
    Employees e
JOIN 
    Employee_Performance ep ON e.employee_id = ep.employee_id;
```

**d. Monthly Sales Trends:**
```sql
SELECT 
    YEAR(sale_date) AS year, 
    MONTH(sale_date) AS month, 
    SUM(total_price) AS monthly_sales
FROM 
    Sales
GROUP BY 
    YEAR(sale_date), MONTH(sale_date)
ORDER BY 
    year, month;
```
